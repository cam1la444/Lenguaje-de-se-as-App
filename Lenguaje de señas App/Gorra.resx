<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYa
        HSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgo
        KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wgARCACoAOsDASIAAhEBAxEB/8QA
        HAABAAIDAQEBAAAAAAAAAAAAAAYHAwQFAQII/8QAGgEBAAMBAQEAAAAAAAAAAAAAAAECBAMFBv/aAAwD
        AQACEAMQAAABs4AAAAAABz+MSn2NZzNWFtbUXrGzILHk2+gk0UziYAAAAAAAHCNzj9TtnB7voAAYM4rS
        GX9FaauPPKL6S9xMOa+IAAAAADjfPNmYAAAAABFqvvmrufocW46RlC1kDp5oAAADz3iGjL+b0gAAAAAB
        HJHxyotfP9ZPrre6Fb2Rq+SCYAAARGXRAmnoAAAAAAIxJ4HF4OMn2GS6qAv7T8v6L5AAB4exLyGxe5lL
        aVdF7KJ6qtwq371uEqYM81AAAVTatG02eDN9Pzb1o28dHzu4OnnCJEt5dY8mm2axTG4+l8/RXWESB49T
        GHuclbPOZfS2C+H9AKWk3TDYbjdi3HkU5OoBy9XcafvH2Pi8qF/QPfwvvi9ui75MnD9zU3fHv0jp95tX
        yLb2boR+vfoNfYppCLAAAAjBs/K3HDi2ubfhs7X39W5ad9VXad8HtHXhhnh+fclg8yNMRxz2WFb2n1E5
        kckaa0hzP0DCKbIF96fvH1tsU0gAAPn41L58Vw/Uk0eAE8wAAAAAANGtrXRegNm2YBy9PktLLz9DYaw2
        db4nFssVtnp5O/kBPIAAAAAAAAADmxYief0yOkt2y3IAAAD/xAArEAABBAECBgEEAgMAAAAAAAADAQIE
        BQAGMBAREhMUIEAVISM0FiQxMjP/2gAIAQEAAQUC+FZTxQYzrqYR8fUJxKN7SD+NKmx4ifVDSMQFobEq
        RLgYMUOECIiWGmQkzyrOrdG1EPAlGcfwps0MNvTYz8iVUSMvsYTDDsaN4sApAPrb9r3fAnzXMLBr2R3b
        VvUsl4QfNayzNWOCRhh7trN8KLUQfEFuXdb5gmqj21k59Wdjke3cF/dv97UMXx5rk6k01NURNtV5Jplv
        OFvagF3alPuhupEr5LZkPauzdiqrQ+PA3rheVUz/AFzSR+l+1f8A5X7+pH9NRwrSePe7Sf2NUb+qyfj4
        Sl7b+fPa06nddv6iJ3LfhP8A+EVecb3X7JZ3MUQItvLjw32NkTHGluxh5rMFcWQ8FqN6YC+gFwRWFbsF
        L5EzhO/XifqesyfGh5JvyPyQU0lURE9/84jEa4FrYAyPqQeRZkeUnpbn8atA3pDwm/rx/tH4zr6JGyTb
        TJeMa1N5RN5x7GwjYDUiJkWzhyuGri/h7TkzkZM7rkySVhAtTkzLOxFAFYTpEvE7aZ151MxHMXOZG40j
        XbzhMdgSyY+Sjy5EjyOWJKEuNe12Gajn8LCWp5TW+ipzwIiENMqpYGN6kwZWv31UksrKSxan0Ke5a+hm
        Mk8LmC+Edrkdxc5G5AqJU3IEEEEWWFRHmZY1x4io9zEa5HJtKvJF7kolLVMrg+phDOOZpgL1TTUvA6Zc
        uQqiHD9VTmk+iY7DAeAzS/fYe9GI0ZZRqerZXj+DLihlisKU8dGc0xr0d7OJ94EE00tdXhgj+JPqo0zJ
        1PKBiOXn1qmd5ud3niNeZ8Chc7BsaJnx5cGNLw2nBZ/H5WR9PDTI8cMZmz//xAAwEQABAwEFBgQGAwAA
        AAAAAAABAAIDBBESITEyBRATIDBRIkGRoRQjUmGB8LHR4f/aAAgBAwEBPwHoscG5i1EB58AsRaW4HrxV
        A0Si0KekuDiR4t6+z6jhvuOyKr6PhG+zLrvZxY7p804XTYerG284DdXNuzu5WxufpCFDMfJGjmHknMc3
        UOWgZfnG7ag+dvhonyYnBR0UTPugLOR9LE/MKTZv0FSU8keobtmBwJeBauOBqBC2k8Pltb2UMfEdYck0
        AaRZ7q+79AXxFzE+39KOpDssf59E1wcLRzPp436gn2UbfA78Jm1HDVYqqYTSXwExxaU2p7p1T2TnF2aB
        sUVWQfF6/uajnDhj/nLNOIgpZDI68eiyR0Ztaoa4ZHBCVpFq4rO6nqwxSSmTqBxbkjPIcC7m/8QAIxEA
        AgIABgIDAQAAAAAAAAAAAAECEQMQEiAwMSFREyJAQf/aAAgBAgEBPwHhf4XH0KX8fPON+SEr8c/T5nlD
        rbdGtGtF7Z9ZYfWbnQ5t7VNoWL7FJPLE9FGH0N1lRpHEqtyk0L7nxkVSyorNwHHbGNiVcLVjgaTSyMBK
        uWlu/8QAOhAAAQIDAwYLCAMBAQAAAAAAAQIDAAQREiEiMDFBUVJxEBMgIyQyQGGBkcEUQlNicqGx0TRD
        kjNz/9oACAEBAAY/AuxLdWQVDMmt5i0JxLfy2Lo6Ult5vabuIhK0XpUKjs9Zh5CO4546BIuuDbcwJjnZ
        lmXGplFT5mOkPTL/ANbhp5COal2k99mKONoUO8QVSauKVsm9MJadUQBckOiqTuMWZ1pTJ2hiTAWytK0a
        0nsYLysR6qBepW4RefYWNQvcP6i0lu25tuYjyyh1AWg5wYK5HnG9LKvSOMk3FMrGdP7EBqfTxLu37p7C
        mVlAHJtejQgazBdcJemVdZ1Wfw1ZPjWaNzI97QrfCmn0WXE50nRAbeq7KfdEJcaUFIVeCMtaAtOqNltO
        swVvG3NO4nF+mV4xm6ZR1Ttd0XjuIMUNVSazeNnvgKSapN4Iyrije3Jiyn6zl0zCBzb9yvqihzR7A8bs
        7R9MpU5hDkwc77ql5d/WgWx4cAcbNHGzaSYafT748jk5lemzZHjdEu1soAy83/5KgbuCZkzoNtOTkZT4
        rwJ3DsDw0qon78MsrQvAcn8ssz9z2CVa2nLXlwsubKqxXJTs4f7nTTcOwBGhpv7nh8YZPyD8ZCph1tl3
        jHykgBF98NMSzDSEoFKqvjFN2foSBGKdmP8AUYJ5/wATWL3GnfqTHSJM721VihdLR1OCkVaWlY1pNcjN
        P7bhpu4TDH0J/HK591KVbOc+UUlGbI23f1HSXlud2YeUXCnLvi02S2rWg0i54PJ1Oj1ik2wtr5k4hFZd
        5C9x5Mw7pCbt8JHdwqhr6B+ORZbPHuakZvOKF1LDey2b/OKjPry1RhVrF0YH+NTsu3xSbllo+ZGIRzMw
        gnUTQ8EvLDO4up3CMLq/GM6FfaMbavC+CEm+uaE7uAFeJxXUQM5jpT1hv4SIwsk74/jiL2SN0YHSnuMX
        pCh8sU06jlsSRHR5p1A1VqIS8+UuqSmyNEY21iM9IwqBhkUxFwDhmJlW1YQNQi0q9R5F8BqVCi6fdEVe
        aDyNpq+kVaVxidRzxdcdRy4YlklRVq0xT2Uf7EfxUp7+MEMLmFt8Whdqlqp4VpP/ABWq02r0jv1cN5gK
        I4hjaVnO4RYYTvUc54LdOKe+Ij1isyi03oeb9YxY0bQiqTUZOphLTKSbWYa4qaKfV1leg5RbeQFoOgxa
        lXlNHUq8R/Ka8jHSJu7UhMVbatL213nk0OaC5IkNL2D1T+oKVJLD2ycxiy4LKsjVUJbQi0tXVb9TFTjm
        FdZfoOxcXMICx+IJZ6Sxq94fuMBtAe6c4i7y5VlsWlfiOZvpndPVTuijQqs9ZZzq7LaWmw78RFxitj2h
        vaR1h4RRKwTsquMYm1eF8e95RgQo+EWL1KP9bd5gGdNhHwkepgIbSEpGYDtHSGULOvTHR5l1vuOIR/Lb
        /wAR0p9x3uGERZYbS2O4ZL//xAApEAABAgQEBgMBAQAAAAAAAAABABEhMUFRYXGBoRAwkbHB8CBA0eHx
        /9oACAEBAAE/IfpAI5DFxHrhkIgOqELh1E0ijLMBrg/Xzqki0mhAUN5iaEucqRHzNfGATK4WC/VHZiDM
        Mrq6OeQhLxImwU9BK9yaOFUng+nQoILiyJx3wPjRG3ZpM6cz85EyW4KCvZhDkZ65FEJdNKD2QGdIAeo7
        IEEAguD9ACE3BfweC/AKTWMBywJIChsP2nnzWnCuMEQw0tfI/EEglCPOEbP9eSO7AdRJPgOaIAgHkL0R
        wdGNQU+m4MnYgXhaARzRELuClQ6c8bUEyxrqOyCULlMIhcm5+/MgNcCiDJjk2dh254IOcrEn/UTBvFQr
        AEuFBJDpHUHXlscWdzP6K4BzNo788Zh9AgYdg4Ph7XI+OWTcZR1z9C5yPUOMcW3yH5y8x0X8z9CBTF5k
        P94tvMfQXQAAEjHlEEIjHpD6DPSY1H7NxFwNkIUmT7OQQIQACZKEQENhINEyUaIlkials1PAbJJi9YRd
        9R9yZ2MYR2ZQ7EdgKKYonfJYEhAbcmogcMEBx3IXorPkGwwMXRFOQesaD5TuH3lnRBDWEGA+ZABgBGKx
        0pT2TCxL09EVAFXo1WTwxBpP4xYYsZkBuVeubj2yFnbsuJIAJMAEeJ8l6A4yJ4JWOZzIqQuU3OTrzjxE
        xI7gmQNtHumm7FKhicv8geD5qivSZ2VMupUedCUqF4ScKmGJNCwDbgJAwnrQMU+R6UEa3Rdb1Af4r3ts
        jjEvWa6wRR6IwwtlDzpyMVq0uyKgQgFKh7K4VY5gtmAoYAZRbFGZ4RkoiqEB+po4iJ+AJAOaI6WEUZmy
        YDgjEaJ9EQ4DnKKE4mdzjARRDDMB6QUZh5n+qESyATFZjpWnEe0XTvfihkM1nHswjZM1KEiG+95nngfL
        lGATkqoWVJS8EHHC+dMQYHLAQgAEyUR7JsOePJQoHl+D5TyEDcIzsBb00B6GyLRfSiUeAgfSp8QEACUC
        DVHDTiVaqWuy3TXio5cl7jeUe9JFEnhwDleD6R9Ql54gaIOxmvCxOPT0Bc7RqUx8nS7AzFF8BwD6NxRO
        ZjffmH1SZJo7jfVFTCpDbO/CeAFMLCpjjAV9mtXD0BCjZYFzNDAk0GifaiHY9g2A+wG0RbqEVEE3RlAH
        XzJMB9X7q+PQ0+d+V//aAAwDAQACAAMAAAAQ88888884gA93888888884AwAAQHN8888888wAAAAAATt
        888884AAAAAAAR3/APPPPOIAAAAAAAvl/PPPJRCyyAAACf8ADzDROEIKEE8syHpqDlBQggIIIIPPzARs
        lB7320IIIJ33zzzzzzzz0IgEsTzzzzzzzzzzz+Pzzzzz/8QAKBEBAAECAgoDAQEAAAAAAAAAAREAITFx
        IDBBUWGBkaGx0RDB8OHx/9oACAEDAQE/ENSlJ5p+kroMT4mmIYdfAPKzJ+qeVn27TP8AZ69eBeT+s0UV
        f2fWuFESjTZqVcYtreJ6Heoi1R4236mjjw5FBTbzKxnphrFwzNHKN+n9+IJ7w+/gJwqEUHfpV9SXH1hQ
        CAj5QbNYejvLUxflvusWY34nxu1rEz28q8oC3UkoqkkMM2gkIF14FC2xxJc1t0KBxRz9FMEMG9R3SeKH
        lQ4YM/SalzJpYW+KSZCcFDL570EIXU90+hEFSo225UEQa3PrS8ukUmNTJ33MeZ/rjQhjfaYvTwdF5tfG
        f6XZS5Z1M4I8OZtqKely2ncyrdhvxOpJW6llehoGHv6Od+FPXsbv2LxdY9LR4UXITN0v/8QAHhEBAAIC
        AwEBAQAAAAAAAAAAAQARITEgMEEQUWH/2gAIAQIBAT8Q6QumZDMEcnf6YMvdD31KbJXtvvHIQbL7VQvx
        2eKNmJ+wX2AdPF0+Oek/nS7+3PSgeJoH4xq0v5CmUqRt2ykzwRTeIpU8tMxKyRPkepiXH8w/cCvhJiU6
        4pJCjpDaP5FHwsgdhB3KvOX/xAAoEAEAAQIEBgIDAQEAAAAAAAABEQAhMUFRYTBxgZGhsRAgQNHwweH/
        2gAIAQEAAT8Q/BBcBeRRaFEobARMxLdiwNABFIc6Wq81pDtweG1TeQRVkC9xCEY5P482JEknkGV2phV7
        IH3G4cqHLSWDmksDuFXkvAZdSDapoP8A+rE+alRkFU0uU1LUt9Og+mTajDMBCrBGSxhJFLtvrib2s7NY
        MCQ5VsHZ/DTvLK9CF2+eG9ShWBg3B6blS5h5sTIeQVB9hxRAfSPujauYI93/AFaLhWP/ACCBiz0jS9tG
        KWrreu4okQJEZE1PwJFMH37mAyxPsOZ2grYwHLIx4dhMjLJlGJpiNy1N3+JwM1iJZKHAYS3We3scoaH7
        dSQ/ssuNEWA5LZCMwxehnV6/zyN4PQ5y6RxHCbcIxXXHJydloAZSk3JgWo0aNoxh/lMzeKHnVKVEiOYn
        FEtVfFK88CdDjkCiALEk6J6pzoJgYTMqOWEuJd9idTTiPOALOQEvqpRD+I/tHfj5ajmhpnQHWhBwAOpN
        FVY+ASf88VAsAPIt0g+OHdEWDG2IoMLHQWfI8fAeg6rD3Un4g8FIIiSZlIxpFupBPPvw03W3nxF/FGFu
        PGLG6yZ8DURbL4WGN2UL7158KyiLnuv55fgGX4C1b/p+XWwQTKAeqwiEPJvwbZsGbQDt2U/sTpSnwoY8
        WQUqDSU+TbBfDSOKqdZ4AIBpRAG7Til3BgI2Quq0KVCc6WEgKliHGlZUaY6xPmnlS2J2GgZjoB2SVBso
        p7rVFohg/hD5ooq/zD5UObcO5CeA4VcyGf19g+RO03mjAafaoY4JT0UndFZJtFlbo9ulXllJ06i7poGa
        5EH2inCFkJKjQuAh3UwNdAHQ7pqThqe72gdmsOPlN1nZ1PrC8ls/zhUtYA8zd9/Pke1JoI+REQEqsAar
        QHGwNzD6TV06SKFor4RyoYS5WW1Vd4sUmVEpK1koAnlD0P3VMFYJOajCHejDFn6ntSVb3hKvH+hoBtOR
        A+ayZaMvFqhyaxY8F6OGBkJi0atDFm5A+GX+pXDF2M/anRM5ew6ZnuzR1tMLU96ExEc5+qMRTUlu4opq
        Sydv2pFO0p3MejW7TFF0eNjaaCHuUWBzCG9w8VadqpCSzABMreri1Yp5lY+zfKieTDNK3wsTcWmh3Ggl
        DW1ABPIhcBzut1p0Vvr6Nj6BQLoJqCRJEJnLYGrUdllzZ3VgI1kUtEiEdOcejS6yOAgdM+MhFAF1cqwL
        0KXnfIYq0nE1KXqDRF0I3svqhJZ8knIEQuhnWOONFkdL0ht1zSqmQmN4GkUoGJiqn4w6HIXXpV+1D7aO
        rBvUWb1I653LA+CtBMER2DzvvS5KIcjRDFc+i07I+qQ2UTYMFcM8TSiAKgP1m/q0OrTCFkBYY7A1zen2
        AR8Fpvs7l6xG2GFsSAc5oWBzdqBFuaM9z/KuH4FhdSbdAfUvaoEgckzKl6hdn2MVuW2KOq7it6osNynC
        f2F87goYrAC6tAzpMPSiw1MAMb1hFuFh4D57H4V3HViH0V1yomOutPlkNS+1GhihcjMvpo1IFrgI5x9m
        hLso/wBGlFAWlW8HgPFEgIbrcOUsBY8/iwNFd3PA8jQQElhpzJepo6YYS2TnPMp7WQ8F/FQ5jR/XWVkb
        /U0JEUKcwMDsULyR0OD5O6o65Ah2D8hOMCBReUXlSprXhra8PlqSImsv3Sy9nGmzEruVP+cCW5Yrm8L/
        2Q==
</value>
  </data>
</root>